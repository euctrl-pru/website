#!/usr/bin/env bash

#-- Version: 1.0
#-- Author: Enrico Spinielli
#-- Date: 2016/09/21
#-- Copyright (C) 2016 Eurocontrol/PRU


##- Usage: extract_atfm_delay_fir_data [-f filename] WEF TIL
##- Extract En-Route ATFM Delay (FIR based) data to csv file for the interval [WEF, TIL).
##- WEF and TIL format is: YYYYMMDD, i.e. 20150301 (1st Mar 2015)
##- Note: TIL is _not_ included.
##-
##- Assumptions:
##-   DBUSR                   environment variable for the relevant schema username.
##-   DBPWD                   environment variable for the relevant schema password.
##-   DBNAME                  environment variable for the relevant schema name.
##-
##-
##- Options:
##-   -f, --file filename     The name of the file to save the output to (default 'ert_dly_<WEF YEAR><WEF MONTHNUM>.csv').
##-   -h, --help              Print a usage message summarizing the command-line options, then exit.
##-   -V, --version           Output version information and exit.
##-
##- Examples:
##- $ extract_enroute_atfm_delay_fir_data '01-JAN-2016' '01-FEB-2016'
##-
##- Caveat: be sure to use gnu-getopt and not OSX builtin or Git Bash missing one ;-)


SCRIPT=$(basename ${BASH_SOURCE[0]})
OUTPUT_FILENAME=''

help=$(grep "^##-" ${BASH_SOURCE} | cut -c 4-)
version=$(grep "^#--"  "${BASH_SOURCE}" | cut -c 4-)
opt_h() {
    echo "$help"
}

opt_v() {
    echo "$version"
}


# Execute getopt
TEMP=$(getopt -o f:hV --long "file:help,version" -n "$SCRIPT" -- "$@");
eval set -- "$TEMP"

while true; do
    case "$1" in
        -f|--file)
            OUTPUT_FILENAME="$2"; shift 2
            ;;
        -h|--help)
            opt_h
            exit 2
            ;;
        -V|--version)
            opt_v
            exit 2
            ;;
        --)
            shift
            break
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            opt_h
            exit 1
            ;;
        *)
            echo "Internal error!"
            exit 1
            ;;
    esac
done

# there are two mandatory arguments
if (( $# != 2 )); then
    echo "Error: illegal number of parameters"
    opt_h
    exit 1
else
    WEF=$(date --date=$1 +"%d-%b-%Y")
    if [ -z $WEF ]
    then
        echo "Error: invalid WEF"
        opt_h
        exit 1
    else
        WEF=$(echo $WEF | tr '[:lower:]' '[:upper:]')
        YYYY=$(date --date=$1 +"%Y")
        MMMM=$(date --date=$1 +"%m")
        OUTPUT_FILENAME="ert_dly_fir_${YYYY}${MMMM}.csv"
    fi

    TIL=$(date --date=$2 +"%d-%b-%Y")
    if [ -z $TIL ]
    then
        echo "Error: invalid TIL"
        opt_h
        exit 1
    else
        TIL=$(echo $TIL | tr '[:lower:]' '[:upper:]')
    fi
fi

sql -S $DBUSR/$DBPWD@$DBNAME @En-Route_ATFM_Delay_FIR.sql $OUTPUT_FILENAME "'$WEF'" "'$TIL'"

# remove blank lines in place
sed -i -E 's/^ +//; s/ +$//; /^$/d' $OUTPUT_FILENAME
