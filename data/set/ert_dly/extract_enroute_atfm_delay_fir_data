#!/usr/bin/env bash

#-- Version: 1.0
#-- Author: Enrico Spinielli
#-- Date: 2016/09/21
#-- Copyright (C) 2016 Eurocontrol/PRU


##- Usage: extract_atfm_delay_fir_data [-f filename] WEF TIL
##- Extract En-Route ATFM Delay (FIR based) data to csv file for the interval [WEF, TIL).
##- WEF and TIL format is: YYYYMMDD, i.e. 20150301 (1st Mar 2015)
##- Note: TIL is _not_ included.
##-
##- Assumptions:
##-   DBUSR                   environment variable for the relevant schema username.
##-   DBPWD                   environment variable for the relevant schema password.
##-   DBNAME                  environment variable for the relevant schema name.
##-
##-
##- Options:
##-   -f, --file filename     The name of the file to save the output to (default 'ert_dly_<WEF YEAR><WEF MONTHNUM>.csv').
##-   -h, --help              Print a usage message summarizing the command-line options, then exit.
##-   -V, --version           Output version information and exit.
##-
##- Examples:
##- $ extract_enroute_atfm_delay_fir_data 20160101 20160201
##-
##- Caveat: be sure to use gnu-getopt and not OSX builtin or Git Bash missing one ;-)


SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT=$(basename "${BASH_SOURCE[0]}")
OUTPUT_FILENAME=''

help=$(grep "^##-" "${SCRIPT_DIR}/${SCRIPT}" | cut -c 4-)
version=$(grep "^#--"  "${SCRIPT_DIR}/${SCRIPT}" | cut -c 4-)
opt_h() {
    echo "$help"
}

opt_v() {
    echo "$version"
}


# Execute getopt
TEMP=$(getopt -o f:hV --long "file:help,version" -n "$SCRIPT" -- "$@");

if [ $? != 0 ]
then
    echo "Invalid option(s): $*" >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
    case $1 in
        -f|--file)
            OUTPUT_FILENAME="$2"; shift 2
            ;;
        -h|--help)
            opt_h
            exit
            ;;
        -V|--version)
            opt_v
            exit
            ;;
        --)
            shift
            break
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            opt_h
            exit 1
            ;;
        *)
            echo "Internal error!"
            exit 1
            ;;
    esac
done



# there are two mandatory arguments
if (( $# != 2 )); then
    echo "Error: illegal number of parameters"
    opt_h
    exit 1
else
    WEFTIL_FORMAT="^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"

    # test WEF is of correct format
    if [[ ! ($1 =~ $WEFTIL_FORMAT) ]]
    then
        echo "Error: WEF is not a 8-digit number"
        echo_h
        exit 1
    fi

    WEF=$(date --date="${1}" +"%Y%m%d" 2>/dev/null)
    if [ -z "$WEF" ]
    then
        echo "Error: invalid WEF = $WEF"
        opt_h
        exit 1
    fi

    # test TIL is of correct format
    if [[ ! ($2 =~ $WEFTIL_FORMAT) ]]
    then
        echo "Error: TIL is not a 8-digit number"
        echo_h
        exit 1
    fi

    TIL=$(date --date="${2}" +"%Y%m%d" 2>/dev/null)
    if [ -z "$TIL" ]
    then
        echo "Error: invalid TIL = $TIL"
        opt_h
        exit 1
    fi
fi



WEF=$(date --date="$1" +"%d-%b-%Y" | tr '[:lower:]' '[:upper:]')
YYYY=$(date --date="$1" +"%Y")
MMMM=$(date --date="$1" +"%m")
OUTPUT_FILENAME="ert_dly_fir_${YYYY}${MMMM}.csv"

TIL=$(date --date="$2" +"%d-%b-%Y" | tr '[:lower:]' '[:upper:]')

sql -S "$DBUSR"/"$DBPWD"@"$DBNAME" @En-Route_ATFM_Delay_FIR.sql "$OUTPUT_FILENAME" "'$WEF'" "'$TIL'"

# remove blank lines in place
sed -i -E 's/^ +//; s/ +$//; /^$/d' "$OUTPUT_FILENAME"
