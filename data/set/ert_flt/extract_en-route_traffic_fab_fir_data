#!/usr/bin/env bash

#-- Version: 1.0
#-- Author: Enrico Spinielli
#-- Date: 2016/01/26
#-- Copyright (C) 2015 Eurocontrol/PRU


##- Usage: extract_en-route_traffic_fab_fir_data <WEF> <TIL>
##- Extract En-route Traffic FAB FIR data to csv file, 'En-Route_Traffic_FAB_FIR.csv'
##- from the period [WEF, TIL).
##-
##- Assumptions:
##-   DBUSR                   environment variable for the relevant schema username.
##-   DBPWD                   environment variable for the relevant schema password.
##-   DBNAME                  environment variable for the relevant schema name.
##-
##- ToDo:
##-  * allow for an optional argument for the name of the file where to save to.
##-
##- Options:
##-   -h, --help              Print a usage message summarizing the command-line options, then exit.
##-   -V, --version           Output version information and exit.
##-
##- Examples:
##- $ extract_en-route_traffic_fab_fir_data '20150101' '20160301'
##-
##- Caveat: be sure to use gnu-getopt and not OSX builtin or Git Bash missing one ;-)

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT=$(basename "${BASH_SOURCE[0]}")

OUTPUT_FILENAME='En-Route_Traffic_FAB_FIR.csv'

opt_h() {
    help=$(grep "^##-" "${SCRIPT_DIR}/${SCRIPT}" | cut -c 4-)
    echo "$help"
}

opt_v() {
    version=$(grep "^#--"  "${SCRIPT_DIR}/${SCRIPT}" | cut -c 4-)
    echo "$version"
}



# Execute getopt
TEMP=$(getopt -o :hV --long ",help,version" -n "$SCRIPT" -- "$@");

if [ $? != 0 ]
then
    echo "Invalid option(s): $*" >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
    case $1 in
        -h|--help)
            opt_h
            exit 2
            ;;
        -V|--version)
            opt_v
            exit 2
            ;;
        --)
            shift
            break
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            opt_h
            exit 1
            ;;
        *)
            echo "Internal error!"
            exit 1
            ;;
    esac
done


# there are two mandatory arguments
if (( $# != 2 )); then
    echo "Error: illegal number of parameters"
    opt_h
    exit 1
else
    WEFTIL_FORMAT="^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"

    # test WEF is of correct format
    if [[ ! ($1 =~ $WEFTIL_FORMAT) ]]
    then
        echo "Error: WEF is not a 8-digit number"
        echo_h
        exit 1
    fi

    WEF=$(date --date="${1}" +"%Y%m%d" 2>/dev/null)
    if [ -z "$WEF" ]
    then
        echo "Error: invalid WEF = $WEF"
        opt_h
        exit 1
    fi

    # test TIL is of correct format
    if [[ ! ($2 =~ $WEFTIL_FORMAT) ]]
    then
        echo "Error: TIL is not a 8-digit number"
        echo_h
        exit 1
    fi

    TIL=$(date --date="${2}" +"%Y%m%d" 2>/dev/null)
    if [ -z "$TIL" ]
    then
        echo "Error: invalid TIL = $TIL"
        opt_h
        exit 1
    fi
fi

WEF=$(date --date="$WEF" +"%d-%b-%Y" | tr '[:lower:]' '[:upper:]')
TIL=$(date --date="$TIL" +"%d-%b-%Y" | tr '[:lower:]' '[:upper:]')

sql -S "$DBUSR"/"$DBPWD"@"$DBNAME" @en-route_traffic_fab_fir_csv.sql "$OUTPUT_FILENAME" "'$WEF'" "'$TIL'"

# remove blank lines in place
sed -i -E 's/^ +//; s/ +$//; /^$/d' "$OUTPUT_FILENAME"
